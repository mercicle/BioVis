}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/alpha_and_turn_fam_std.pdf")
hist( alpha_and_turn_fam_std,
main="Alpha and Turn: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
beta_fam_std = c();
for (i in 1:ncol(beta_scored_family)){
beta_fam_std <- append(beta_fam_std,sd(beta_scored_family[,i]))
}
beta_dTIM_m_mean_std <- (beta_dTIM_means - beta_fam_means) / beta_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/beta_dTIM_m_mean_std.pdf")
hist( beta_dTIM_m_mean_std,
main="Beta: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/beta_fam_std.pdf")
hist( beta_fam_std,
main="Beta: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
comp_fam_std = c();
for (i in 1:ncol(comp_scored_family)){
comp_fam_std <- append(comp_fam_std,sd(comp_scored_family[,i]))
}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/comp_fam_std.pdf")
hist( comp_fam_std,
main="Composition: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
comp_dTIM_m_mean_std <- (comp_dTIM_means - comp_fam_means) / comp_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/comp_dTIM_m_mean_std.pdf")
hist( comp_dTIM_m_mean_std,
main="comp: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
hydro_fam_std = c();
for (i in 1:ncol(hydro_scored_family)){
hydro_fam_std <- append(hydro_fam_std,sd(hydro_scored_family[,i]))
}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinhydroData/ScoredTIMs/hydro_fam_std.pdf")
hist( hydro_fam_std,
main="Hydrophobicity: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
hydro_dTIM_m_mean_std <- (hydro_dTIM_means - hydro_fam_means) / hydro_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinhydroData/ScoredTIMs/hydro_dTIM_m_mean_std.pdf")
hist( hydro_dTIM_m_mean_std,
main="Hydrophobicity: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
hydro_fam_std = c();
for (i in 1:ncol(hydro_scored_family)){
hydro_fam_std <- append(hydro_fam_std,sd(hydro_scored_family[,i]))
}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/hydro_fam_std.pdf")
hist( hydro_fam_std,
main="Hydrophobicity: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
hydro_dTIM_m_mean_std <- (hydro_dTIM_means - hydro_fam_means) / hydro_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/hydro_dTIM_m_mean_std.pdf")
hist( hydro_dTIM_m_mean_std,
main="Hydrophobicity: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
other_fam_std = c();
for (i in 1:ncol(other_scored_family)){
other_fam_std <- append(other_fam_std,sd(other_scored_family[,i]))
}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/other_fam_std.pdf")
hist( other_fam_std,
main="Other Properties: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
other_dTIM_m_mean_std <- (other_dTIM_means - other_fam_means) / other_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/other_dTIM_m_mean_std.pdf")
hist( other_dTIM_m_mean_std,
main="Other Properties: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
physico_fam_std = c();
for (i in 1:ncol(physico_scored_family)){
physico_fam_std <- append(physico_fam_std,sd(physico_scored_family[,i]))
}
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/physico_fam_std.pdf")
hist( physico_fam_std,
main="physico Properties: Standard Deviation Distribution",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
physico_dTIM_m_mean_std <- (physico_dTIM_means - physico_fam_means) / physico_fam_std
pdf(file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/physico_dTIM_m_mean_std.pdf")
hist( physico_dTIM_m_mean_std,
main="physico Properties: dTIM Minus Family Mean (Standardized)",
freq=FALSE,
breaks = 20,
col="lightgreen",
border="black")
dev.off()
alpha_turn_dTIM_m_mean_std_df <- as.data.frame(alpha_turn_dTIM_m_mean_std)
beta_dTIM_m_mean_std_df  <- as.data.frame(beta_dTIM_m_mean_std)
comp_dTIM_m_mean_std_df <- as.data.frame(comp_dTIM_m_mean_std)
hydro_dTIM_m_mean_std_df  <- as.data.frame(hydro_dTIM_m_mean_std)
other_dTIM_m_mean_std_df  <- as.data.frame(other_dTIM_m_mean_std)
physico_dTIM_m_mean_std_df <- as.data.frame(physico_dTIM_m_mean_std)
#Now, combine your two dataframes into one.  First make a new column in each.
alpha_turn_dTIM_m_mean_std_df$characteristic <- 'Alpha-Turn Propensity'
beta_dTIM_m_mean_std_df$characteristic  <- 'Beta Propensity'
comp_dTIM_m_mean_std_df$characteristic <- 'Composition'
hydro_dTIM_m_mean_std_df$characteristic  <-  'Hydrophobicity'
other_dTIM_m_mean_std_df$characteristic  <- 'Other Properties'
physico_dTIM_m_mean_std_df$characteristic <-  'Physicochemical Properties'
names(alpha_turn_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
names(beta_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
names(comp_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
names(hydro_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
names(other_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
names(physico_dTIM_m_mean_std_df)[1] <- "dTIMmMean"
#and combine into your new data frame vegLengths
allDistsStd <- rbind(alpha_turn_dTIM_m_mean_std_df,
beta_dTIM_m_mean_std_df,
comp_dTIM_m_mean_std_df,
hydro_dTIM_m_mean_std_df,
other_dTIM_m_mean_std_df,
physico_dTIM_m_mean_std_df)
#now make your lovely plot
ggplot(allDistsStd, aes(x = dTIMmMean))  +
geom_histogram(data=subset(allDists,characteristic == "alpha"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "beta"),fill = "grey", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "comp"),fill = "blue", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "hydro"),fill = "green", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "other"),fill = "purple", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "physico"),fill = "yellow", alpha = 0.2)
ggplot(allDistsStd, aes(x = dTIMmMean))  +
geom_histogram(data=subset(allDists,characteristic == "Alpha-Turn Propensity"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Beta Propensity"),fill = "grey", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Composition"),fill = "blue", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Hydrophobicity"),fill = "green", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Other Properties"),fill = "purple", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Physicochemical Properties"),fill = "yellow", alpha = 0.2) +
geom_histogram(aes(fill = ..count..)) +
scale_fill_gradient("count", low = "red",high = "green") +
facet_wrap(~ characteristic)
+ ggtitle("his")
ggplot(allDistsStd, aes(x = dTIMmMean))  +
geom_histogram(data=subset(allDists,characteristic == "Alpha-Turn Propensity"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Beta Propensity"),fill = "grey", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Composition"),fill = "blue", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Hydrophobicity"),fill = "green", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Other Properties"),fill = "purple", alpha = 0.2) +
geom_histogram(data=subset(allDists,characteristic == "Physicochemical Properties"),fill = "yellow", alpha = 0.2) +
geom_histogram(aes(fill = ..count..)) +
scale_fill_gradient("count", low = "red",high = "green") +
facet_wrap(~ characteristic)
+ ggtitle("his")
alpha_turn_dTIM_m_mean_std_df
rstudio::viewData(alpha_turn_dTIM_m_mean_std_df)
rstudio::viewData(allDistsStd)
ggplot(allDistsStd, aes(x = dTIMmMean))  +
geom_histogram(data=subset(allDistsStd,characteristic == "Alpha-Turn Propensity"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(allDistsStd,characteristic == "Beta Propensity"),fill = "grey", alpha = 0.2) +
geom_histogram(data=subset(allDistsStd,characteristic == "Composition"),fill = "blue", alpha = 0.2) +
geom_histogram(data=subset(allDistsStd,characteristic == "Hydrophobicity"),fill = "green", alpha = 0.2) +
geom_histogram(data=subset(allDistsStd,characteristic == "Other Properties"),fill = "purple", alpha = 0.2) +
geom_histogram(data=subset(allDistsStd,characteristic == "Physicochemical Properties"),fill = "yellow", alpha = 0.2) +
geom_histogram(aes(fill = ..count..)) +
scale_fill_gradient("count", low = "red",high = "green") +
facet_wrap(~ characteristic)
+ ggtitle("his")
allDistsStd <- data.frame(AlphaTurnPropensity = alpha_turn_dTIM_m_mean_std ,
BetaPropensity = beta_dTIM_m_mean_std ,
Composition = comp_dTIM_m_mean_std ,
Hydrophobicity = hydro_dTIM_m_mean_std ,
OtherCharacteristics = other_dTIM_m_mean_std ,
PhysicochemicalProperties = physico_dTIM_m_mean_std )
pairs(~AlphaTurnPropensity
+BetaPropensity
+ Composition
+ Hydrophobicity
+ OtherCharacteristics
+ PhysicochemicalProperties
,data = allDistsStd,
main="ScatterPlot of AA Characteristics: (dTIM Principal Component - Mean Principal Component) / Std")
alpha_turn_dTIM_m_mean_std
getwd()
setwd("/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format1")
###############
### alpha #####
###############
sink("alpha_turn_dTIM_m_mean.txt")
cat(toJSON(alpha_turn_dTIM_m_mean_std))
sink()
load(rJSON)
package(rJSON)
library("rjson", lib.loc="/Users/mercicle/Library/R/2.15/library")
getwd()
setwd("/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format1")
###############
### alpha #####
###############
sink("alpha_turn_dTIM_m_mean.txt")
cat(toJSON(alpha_turn_dTIM_m_mean_std))
sink()
file.show("alpha_turn_dTIM_m_mean_std.txt")
sink("alpha_turn_dTIM_m_mean.txt")
cat(toJSON(alpha_turn_dTIM_m_mean_std))
sink()
file.show("alpha_turn_dTIM_m_mean_std.txt")
alpha_turn_dTIM_m_mean_std
sink("alpha_turn_dTIM_m_mean_std.txt")
cat(toJSON(alpha_turn_dTIM_m_mean_std))
sink()
file.show("alpha_turn_dTIM_m_mean_std.txt")
sink("beta_dTIM_m_mean_std.txt")
cat(toJSON(beta_dTIM_m_mean_std))
sink()
file.show("beta_dTIM_m_mean_std.txt")
###############
### comp ######
###############
sink("comp_dTIM_m_mean_std.txt")
cat(toJSON(comp_dTIM_m_mean_std))
sink()
file.show("comp_dTIM_m_mean_std.txt")
###############
### other #####
###############
sink("other_dTIM_m_mean_std.txt")
cat(toJSON(other_dTIM_m_mean_std))
sink()
file.show("other_dTIM_m_mean_std.txt")
###############
### physico ###
###############
sink("physico_dTIM_m_mean_std.txt")
cat(toJSON(physico_dTIM_m_mean_std))
sink()
file.show("physico_dTIM_m_mean_std.txt")
###############
###  hydro  ###
###############
sink("hydro_dTIM_m_mean_std.txt")
cat(toJSON(hydro_dTIM_m_mean_std))
sink()
file.show("hydro_dTIM_m_mean_std.txt")
###############
### dTIM ######
###############
dTIM_vector <- c()
seq <- as.character( aligned_proteins_dTIM_only$sequence)
length_of_seq <- nchar(aligned_proteins_dTIM_only$sequence)
###############
### alpha #####
###############
final_output<- 'var alpha_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,alpha_turn_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,alpha_turn_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/alpha_dTIM_m_mean_std.js")
###############
### beta ######
###############
final_output<- 'var beta_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,beta_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,beta_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/beta_dTIM_m_mean_std.js")
###############
### comp ######
###############
final_output<- 'var comp_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,comp_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,comp_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/comp_dTIM_m_mean_std.js")
###############
### other  ####
###############
final_output<- 'var other_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,other_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,other_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/other_dTIM_m_mean_std.js")
###############
## physico  ###
###############
final_output<- 'var physico_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,physico_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,physico_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/physico_dTIM_m_mean_std.js")
###############
##  hydro   ###
###############
final_output<- 'var hydro_dTIM_m_mean_std = { "points": ['
for (i in 1: length_of_seq) {
#first the amino acid
final_output = paste(final_output,'["',substr(seq,i,i), '",', sep="")
#now the residue index
final_output = paste(final_output,i, ',', sep="")
#now the score
if(i != length_of_seq){
final_output = paste(final_output,hydro_dTIM_m_mean_std[i], '],', sep="")
}else{
final_output = paste(final_output,hydro_dTIM_m_mean_std[i], ']', sep="")
}
}
final_output = paste(final_output,']};', sep="")
final_output <- gsub("(^ +)|( +$)", "",final_output)
write(final_output,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/PrinCompData/ScoredTIMs/JSON_For_Web/Format2/hydro_dTIM_m_mean_std.js")
fix(dTIM_vector)
fix(dTIM_vector)
dTIM <- as.character( aligned_proteins_dTIM_only$sequence)
length_of_dTIM <- nchar(aligned_proteins_dTIM_only$sequence)
dTIM[0:5]
dTIM.substr(1,5)
substr(dTIM,1,5)
substr(dTIM,155,5)
substr(dTIM,151,5)
dTIM''
dTIM
length_of_dTIM
substr(dTIM,151,155)
substr(dTIM,0,1)
substr(dTIM,152,156)
substr(dTIM,152,155)
scTIM <- as.character( aligned_proteins_scTIM_only$sequence)
length_of_scTIM <- nchar(aligned_proteins_scTIM_only$sequence)
substr(scTIM,152,155)
scTIMo <- "MARTFFVGGNFKLNGSKQSIKEIVERLNTASIPENVEVVICPPATYLDYSVSLVKKPQVTVGAQNAYLKASGAFTGENSVDQIKDVGAKWVILGHSERRSYFHEDDKFIADKTKFALGQGVGVILCIGETLEEKKAGKTLDVVERQLNAVLEEVKDWTNVVVAYEPVWAIGTGLAATPEDAQDIHASIRKFLASKLGDKAASELRILYGGSANGSNAVTFKDKADVDGFLVGGASLKPEFVDIINSRN"
substr(scTIMo,152,155)
dTIMo <- "MARTPFVGGNWKMNGTKAEAKELVEALKAKLPDDVEVVVAPPAVYLDTAREALKGSKIKVAAQNCYKEAKGAFTGEISPEMLKDLGADYVILGHSERRHYFGETDELVAKKVAHALEHGLKVIACIGETLEEREAGKTEEVVFRQTKALLAGLGDEWKNVVIAYEPVWAIGTGKTATPEQAQEVHAFIRKWLAENVSAEVAESVRILYGGSVKPANAKELAAQPDIDGFLVGGASLKPEFLDIINSRN"
substr(dTIMo,152,155)
rstudio::viewData(aligned_proteins_wo_dscTIM)
pos152 <- c()
pos153 <- c()
pos154 <- c()
pos155 <- c()
for (r in 1:nrow(aligned_proteins_wo_dscTIM)) {
temp_string <- as.character(as.vector(aligned_proteins_wo_dscTIM[r,2]))
pos152 <- append(pos152,substr(temp_string,152,153))
}
pos152
fre(pos152)
freq(pos152)
table(pos152)
substr(dTIMo,152,152)
pos152 <- c()
pos153 <- c()
pos154 <- c()
pos155 <- c()
for (r in 1:nrow(aligned_proteins_wo_dscTIM)) {
temp_string <- as.character(as.vector(aligned_proteins_wo_dscTIM[r,2]))
pos152 <- append(pos152,substr(temp_string,152,152))
}
pos152_table <- table(pos152)             # frequency table
pos152_table
pos152_table_prop <- prop.table(pos152_table , 1)
pos152_table_prop
pos152_table <- prop.table(pos152)
pos152_table_prop <- prop.table(pos152_table,1)
pos152_table_prop
?prop.table
pos152_table_prop <- prop.table(pos152_table)
pos152_table_prop
pos152
pos152_table
pos152_table_prop[0]
pos152 <- c()
pos153 <- c()
pos154 <- c()
pos155 <- c()
for (r in 1:nrow(aligned_proteins_wo_dscTIM)) {
temp_string <- as.character(as.vector(aligned_proteins_wo_dscTIM[r,2]))
residue <- substr(temp_string,152,152)
if (residue != "-"){
pos152 <- append(pos152,residue)
}
}
pos152_table <- table(pos152)             # frequency table
pos152_table_prop <- prop.table(pos152_table)
pos152_table_prop
pos152_table_prop["M"]
pos152_table_prop["G"]
max(pos152_table_prop)
pos152_table_prop
pos152_table_prop["E"]
pos152 <- c()
pos153 <- c()
pos154 <- c()
pos155 <- c()
for (r in 1:nrow(aligned_proteins_wo_dscTIM)) {
temp_string <- as.character(as.vector(aligned_proteins_wo_dscTIM[r,2]))
residue <- substr(temp_string,152,152)
if (residue != "-"){
pos152 <- append(pos152,residue)
}
residue <- substr(temp_string,153,153)
if (residue != "-"){
pos153 <- append(pos153,residue)
}
residue <- substr(temp_string,154,154)
if (residue != "-"){
pos154 <- append(pos154,residue)
}
residue <- substr(temp_string,155,155)
if (residue != "-"){
pos155 <- append(pos155,residue)
}
}
write.csv(pos152_table_prop,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/ProcessBook/pos152_table_prop.csv"))
write.csv(pos152_table_prop,file="/Users/mercicle/Documents/python_workspace/BioVis/Codes/ProcessBook/pos152_table_prop.csv")
pos153_table <- table(pos153)
# %'s
pos153_table_prop <- prop.table(pos153_table)
pos153_table_prop["L"]
#
max(pos152_table_prop)
max(pos153_table_prop)
pos153_table_prop["E"]
pos153_table_prop
